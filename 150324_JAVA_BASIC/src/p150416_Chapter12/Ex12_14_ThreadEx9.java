package p150416_Chapter12;

import java.util.ArrayList;
import java.util.Collection;


public class Ex12_14_ThreadEx9 {
	public static void main(String[] args) {
		new PrintThread('A').start();
		new PrintThread('B').start();
		new PrintThread('C').start();		
	}
	static class PrintThread extends Thread{
		char ch ;
		/* lock은 반드시 객체여야 함. 기본자료형으로는 사용 불가
		 * lock으로 사용하는 객체는 프로그램 내에 유일해야 한다.
		 * 모든 쓰레드 객체가 하나의 lock을 공유해야 동기화가 된다.
		 *  */
		static Collection<String> lock = new ArrayList<String>();
		PrintThread(char ch){
			this.ch = ch ;
		}
		public void run(){
				for(int i = 1 ; i <= 10 ; i ++){
					synchronized (lock) {
						for(int j = 0 ; j <= 40 ; j++)		
							System.out.print(ch);
						System.out.println();						
					}	// sync 종료			
			} 
		}
	}
}
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
